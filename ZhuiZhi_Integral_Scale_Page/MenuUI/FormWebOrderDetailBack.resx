<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picClose.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>